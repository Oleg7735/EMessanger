#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EncryptMessanger.dll.DataBase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertDialog(Dialog instance);
    partial void UpdateDialog(Dialog instance);
    partial void DeleteDialog(Dialog instance);
    partial void InsertDialogMembers(DialogMembers instance);
    partial void UpdateDialogMembers(DialogMembers instance);
    partial void DeleteDialogMembers(DialogMembers instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataDataContext() : 
				base(global::EncryptMessanger.dll.Properties.Settings.Default.Database1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dialog> Dialog
		{
			get
			{
				return this.GetTable<Dialog>();
			}
		}
		
		public System.Data.Linq.Table<DialogMembers> DialogMembers
		{
			get
			{
				return this.GetTable<DialogMembers>();
			}
		}
		
		public System.Data.Linq.Table<Message> Message
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permission
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dialog")]
	public partial class Dialog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _creation_time;
		
		private EntitySet<DialogMembers> _DialogMembers;
		
		private EntitySet<Message> _Message;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncreation_timeChanging(System.Nullable<System.DateTime> value);
    partial void Oncreation_timeChanged();
    #endregion
		
		public Dialog()
		{
			this._DialogMembers = new EntitySet<DialogMembers>(new Action<DialogMembers>(this.attach_DialogMembers), new Action<DialogMembers>(this.detach_DialogMembers));
			this._Message = new EntitySet<Message>(new Action<Message>(this.attach_Message), new Action<Message>(this.detach_Message));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creation_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> creation_time
		{
			get
			{
				return this._creation_time;
			}
			set
			{
				if ((this._creation_time != value))
				{
					this.Oncreation_timeChanging(value);
					this.SendPropertyChanging();
					this._creation_time = value;
					this.SendPropertyChanged("creation_time");
					this.Oncreation_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dialog_DialogMembers", Storage="_DialogMembers", ThisKey="id", OtherKey="dialog_id")]
		public EntitySet<DialogMembers> DialogMembers
		{
			get
			{
				return this._DialogMembers;
			}
			set
			{
				this._DialogMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dialog_Message", Storage="_Message", ThisKey="id", OtherKey="dialog_id")]
		public EntitySet<Message> Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				this._Message.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DialogMembers(DialogMembers entity)
		{
			this.SendPropertyChanging();
			entity.Dialog = this;
		}
		
		private void detach_DialogMembers(DialogMembers entity)
		{
			this.SendPropertyChanging();
			entity.Dialog = null;
		}
		
		private void attach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.Dialog = this;
		}
		
		private void detach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.Dialog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DialogMembers")]
	public partial class DialogMembers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _dialog_id;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<System.DateTime> _add_time;
		
		private System.Nullable<int> _permission_id;
		
		private EntityRef<Dialog> _Dialog;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondialog_idChanging(System.Nullable<int> value);
    partial void Ondialog_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onadd_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onadd_timeChanged();
    partial void Onpermission_idChanging(System.Nullable<int> value);
    partial void Onpermission_idChanged();
    #endregion
		
		public DialogMembers()
		{
			this._Dialog = default(EntityRef<Dialog>);
			this._Permission = default(EntityRef<Permission>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dialog_id", DbType="Int")]
		public System.Nullable<int> dialog_id
		{
			get
			{
				return this._dialog_id;
			}
			set
			{
				if ((this._dialog_id != value))
				{
					if (this._Dialog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondialog_idChanging(value);
					this.SendPropertyChanging();
					this._dialog_id = value;
					this.SendPropertyChanged("dialog_id");
					this.Ondialog_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_add_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> add_time
		{
			get
			{
				return this._add_time;
			}
			set
			{
				if ((this._add_time != value))
				{
					this.Onadd_timeChanging(value);
					this.SendPropertyChanging();
					this._add_time = value;
					this.SendPropertyChanged("add_time");
					this.Onadd_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permission_id", DbType="Int")]
		public System.Nullable<int> permission_id
		{
			get
			{
				return this._permission_id;
			}
			set
			{
				if ((this._permission_id != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpermission_idChanging(value);
					this.SendPropertyChanging();
					this._permission_id = value;
					this.SendPropertyChanged("permission_id");
					this.Onpermission_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dialog_DialogMembers", Storage="_Dialog", ThisKey="dialog_id", OtherKey="id", IsForeignKey=true)]
		public Dialog Dialog
		{
			get
			{
				return this._Dialog.Entity;
			}
			set
			{
				Dialog previousValue = this._Dialog.Entity;
				if (((previousValue != value) 
							|| (this._Dialog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dialog.Entity = null;
						previousValue.DialogMembers.Remove(this);
					}
					this._Dialog.Entity = value;
					if ((value != null))
					{
						value.DialogMembers.Add(this);
						this._dialog_id = value.id;
					}
					else
					{
						this._dialog_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dialog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_DialogMembers", Storage="_Permission", ThisKey="permission_id", OtherKey="id", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.DialogMembers.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.DialogMembers.Add(this);
						this._permission_id = value.id;
					}
					else
					{
						this._permission_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_DialogMembers", Storage="_Users", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.DialogMembers.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.DialogMembers.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Data.Linq.Binary _text;
		
		private int _dialog_id;
		
		private System.Nullable<bool> _delivered;
		
		private int _user_id;
		
		private EntityRef<Dialog> _Dialog;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OntextChanging(System.Data.Linq.Binary value);
    partial void OntextChanged();
    partial void Ondialog_idChanging(int value);
    partial void Ondialog_idChanged();
    partial void OndeliveredChanging(System.Nullable<bool> value);
    partial void OndeliveredChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    #endregion
		
		public Message()
		{
			this._Dialog = default(EntityRef<Dialog>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="Binary(1024)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dialog_id", DbType="Int NOT NULL")]
		public int dialog_id
		{
			get
			{
				return this._dialog_id;
			}
			set
			{
				if ((this._dialog_id != value))
				{
					if (this._Dialog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondialog_idChanging(value);
					this.SendPropertyChanging();
					this._dialog_id = value;
					this.SendPropertyChanged("dialog_id");
					this.Ondialog_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delivered", DbType="Bit")]
		public System.Nullable<bool> delivered
		{
			get
			{
				return this._delivered;
			}
			set
			{
				if ((this._delivered != value))
				{
					this.OndeliveredChanging(value);
					this.SendPropertyChanging();
					this._delivered = value;
					this.SendPropertyChanged("delivered");
					this.OndeliveredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dialog_Message", Storage="_Dialog", ThisKey="dialog_id", OtherKey="id", IsForeignKey=true)]
		public Dialog Dialog
		{
			get
			{
				return this._Dialog.Entity;
			}
			set
			{
				Dialog previousValue = this._Dialog.Entity;
				if (((previousValue != value) 
							|| (this._Dialog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dialog.Entity = null;
						previousValue.Message.Remove(this);
					}
					this._Dialog.Entity = value;
					if ((value != null))
					{
						value.Message.Add(this);
						this._dialog_id = value.id;
					}
					else
					{
						this._dialog_id = default(int);
					}
					this.SendPropertyChanged("Dialog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Message", Storage="_Users", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Message.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Message.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _permission;
		
		private EntitySet<DialogMembers> _DialogMembers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpermissionChanging(string value);
    partial void OnpermissionChanged();
    #endregion
		
		public Permission()
		{
			this._DialogMembers = new EntitySet<DialogMembers>(new Action<DialogMembers>(this.attach_DialogMembers), new Action<DialogMembers>(this.detach_DialogMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permission", DbType="NVarChar(100)")]
		public string permission
		{
			get
			{
				return this._permission;
			}
			set
			{
				if ((this._permission != value))
				{
					this.OnpermissionChanging(value);
					this.SendPropertyChanging();
					this._permission = value;
					this.SendPropertyChanged("permission");
					this.OnpermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_DialogMembers", Storage="_DialogMembers", ThisKey="id", OtherKey="permission_id")]
		public EntitySet<DialogMembers> DialogMembers
		{
			get
			{
				return this._DialogMembers;
			}
			set
			{
				this._DialogMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DialogMembers(DialogMembers entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_DialogMembers(DialogMembers entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _login;
		
		private string _ip;
		
		private System.Data.Linq.Binary _hash;
		
		private EntitySet<DialogMembers> _DialogMembers;
		
		private EntitySet<Message> _Message;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    partial void OnhashChanging(System.Data.Linq.Binary value);
    partial void OnhashChanged();
    #endregion
		
		public Users()
		{
			this._DialogMembers = new EntitySet<DialogMembers>(new Action<DialogMembers>(this.attach_DialogMembers), new Action<DialogMembers>(this.detach_DialogMembers));
			this._Message = new EntitySet<Message>(new Action<Message>(this.attach_Message), new Action<Message>(this.detach_Message));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NVarChar(100)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="NChar(15)")]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hash", DbType="Binary(128)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary hash
		{
			get
			{
				return this._hash;
			}
			set
			{
				if ((this._hash != value))
				{
					this.OnhashChanging(value);
					this.SendPropertyChanging();
					this._hash = value;
					this.SendPropertyChanged("hash");
					this.OnhashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_DialogMembers", Storage="_DialogMembers", ThisKey="id", OtherKey="user_id")]
		public EntitySet<DialogMembers> DialogMembers
		{
			get
			{
				return this._DialogMembers;
			}
			set
			{
				this._DialogMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Message", Storage="_Message", ThisKey="id", OtherKey="user_id")]
		public EntitySet<Message> Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				this._Message.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DialogMembers(DialogMembers entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_DialogMembers(DialogMembers entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
